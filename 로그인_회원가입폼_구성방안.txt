
#### **1️⃣ 입력 폼 개선 (유효성 검사 추가)**  
현재는 그냥 `input`만 있는데, 입력값을 검증할 로직이 필요해.  
- **Yup + React Hook Form**을 사용하면 쉽게 검증 가능  
- 비밀번호는 8자 이상, 아이디는 영문+숫자 포함 같은 조건 추가  

#### **2️⃣ API 연동을 고려한 구조화**  
나중에 서버 연동이 쉬워야 하니까, API 요청을 별도 파일로 분리해 둬야 해.  
- `src/api/auth.js` 파일을 만들어서 axios를 이용한 로그인/회원가입 API 요청 정의  

#### **3️⃣ 백엔드 없이 프론트에서 임시 로그인 기능 구현**  
백엔드가 아직 완성되지 않았다면, 프론트에서 **임시 로그인 로직**을 만들어보는 것도 좋아.  
- `useState`를 사용해서 로그인 성공 여부 관리  
- 예를 들어, `아이디: test / 비밀번호: 1234` 입력하면 "로그인 성공!" 띄우기  

#### **4️⃣ 백엔드 API와 실제 연동**  
백엔드 준비가 되면 API와 연결!  
- 로그인 API 요청 -> JWT 토큰 저장 (`localStorage` 또는 `쿠키`)  
- 회원가입 요청 보내고 성공하면 자동 로그인 또는 로그인 페이지로 이동  

#### **5️⃣ 로그인 상태 유지 및 보호 (인증 기능 추가)**  
- `useContext`나 `Zustand`로 로그인 상태 전역 관리  
- `로그인한 사용자만 접근 가능`한 페이지 제한 (React Router `PrivateRoute` 같은 개념)  

---

### **다음으로 할 일 추천**
1️⃣ `Yup + React Hook Form`으로 **입력값 검증 추가**  
2️⃣ `src/api/auth.js` 파일 만들어서 **API 요청 함수 정의**  
3️⃣ `useState` 활용해서 **임시 로그인 성공 여부 관리**  
